// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_S2CPIDACK_H_
#define FLATBUFFERS_GENERATED_S2CPIDACK_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 12 &&
              FLATBUFFERS_VERSION_REVISION == 6,
             "Non-compatible flatbuffers version included");

struct S2C_PID_ACK;
struct S2C_PID_ACKBuilder;

struct S2C_PID_ACK FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef S2C_PID_ACKBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SIZE = 4,
    VT_CODE = 6,
    VT_PID = 8
  };
  int32_t size() const {
    return GetField<int32_t>(VT_SIZE, 0);
  }
  int32_t code() const {
    return GetField<int32_t>(VT_CODE, 0);
  }
  int32_t pid() const {
    return GetField<int32_t>(VT_PID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_SIZE, 4) &&
           VerifyField<int32_t>(verifier, VT_CODE, 4) &&
           VerifyField<int32_t>(verifier, VT_PID, 4) &&
           verifier.EndTable();
  }
};

struct S2C_PID_ACKBuilder {
  typedef S2C_PID_ACK Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_size(int32_t size) {
    fbb_.AddElement<int32_t>(S2C_PID_ACK::VT_SIZE, size, 0);
  }
  void add_code(int32_t code) {
    fbb_.AddElement<int32_t>(S2C_PID_ACK::VT_CODE, code, 0);
  }
  void add_pid(int32_t pid) {
    fbb_.AddElement<int32_t>(S2C_PID_ACK::VT_PID, pid, 0);
  }
  explicit S2C_PID_ACKBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<S2C_PID_ACK> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<S2C_PID_ACK>(end);
    return o;
  }
};

inline flatbuffers::Offset<S2C_PID_ACK> CreateS2C_PID_ACK(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t size = 0,
    int32_t code = 0,
    int32_t pid = 0) {
  S2C_PID_ACKBuilder builder_(_fbb);
  builder_.add_pid(pid);
  builder_.add_code(code);
  builder_.add_size(size);
  return builder_.Finish();
}

inline const S2C_PID_ACK *GetS2C_PID_ACK(const void *buf) {
  return flatbuffers::GetRoot<S2C_PID_ACK>(buf);
}

inline const S2C_PID_ACK *GetSizePrefixedS2C_PID_ACK(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<S2C_PID_ACK>(buf);
}

inline bool VerifyS2C_PID_ACKBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<S2C_PID_ACK>(nullptr);
}

inline bool VerifySizePrefixedS2C_PID_ACKBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<S2C_PID_ACK>(nullptr);
}

inline void FinishS2C_PID_ACKBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<S2C_PID_ACK> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedS2C_PID_ACKBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<S2C_PID_ACK> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_S2CPIDACK_H_
